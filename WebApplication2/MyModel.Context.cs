//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
   
    
    public partial class MyDatabaseEntities : DbContext
    {
        public MyDatabaseEntities()
            : base("name=MyDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<User> Users { get; set; }
        public DbSet<Alumno> Alumnos { get; set; }
        public DbSet<Venta> Ventas { get; set; }
    
        public virtual int agregarpadres(string username, string password, string firstName, string lastNane, string area, string emailID, Nullable<double> saldo)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNaneParameter = lastNane != null ?
                new ObjectParameter("LastNane", lastNane) :
                new ObjectParameter("LastNane", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var saldoParameter = saldo.HasValue ?
                new ObjectParameter("Saldo", saldo) :
                new ObjectParameter("Saldo", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarpadres", usernameParameter, passwordParameter, firstNameParameter, lastNaneParameter, areaParameter, emailIDParameter, saldoParameter);
        }
    }
}
